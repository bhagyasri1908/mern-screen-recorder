{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\mern-screen-recorder\\\\frontend\\\\src\\\\components\\\\Recorder.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Recorder = ({\n  onRecordingUploaded\n}) => {\n  _s();\n  const [recording, setRecording] = useState(false);\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [recordedChunks, setRecordedChunks] = useState([]);\n  const [timer, setTimer] = useState(0);\n  const [uploadStatus, setUploadStatus] = useState('');\n  const [previewUrl, setPreviewUrl] = useState('');\n  const timerRef = useRef(null);\n  const MAX_RECORDING_TIME = 180; // 3 minutes in seconds\n\n  const startRecording = async () => {\n    try {\n      // Get display media (screen)\n      const displayStream = await navigator.mediaDevices.getDisplayMedia({\n        video: {\n          mediaSource: 'screen'\n        }\n      });\n\n      // Get microphone audio\n      const audioStream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n\n      // Combine both streams\n      const combinedStream = new MediaStream([...displayStream.getVideoTracks(), ...audioStream.getAudioTracks()]);\n\n      // Create media recorder\n      const recorder = new MediaRecorder(combinedStream, {\n        mimeType: 'video/webm; codecs=vp9,opus'\n      });\n      const chunks = [];\n      recorder.ondataavailable = e => {\n        if (e.data.size > 0) {\n          chunks.push(e.data);\n        }\n      };\n      recorder.onstop = () => {\n        setRecordedChunks(chunks);\n        const blob = new Blob(chunks, {\n          type: 'video/webm'\n        });\n        setPreviewUrl(URL.createObjectURL(blob));\n\n        // Stop all tracks\n        combinedStream.getTracks().forEach(track => track.stop());\n      };\n      recorder.start();\n      setMediaRecorder(recorder);\n      setRecording(true);\n      setRecordedChunks([]);\n      setPreviewUrl('');\n\n      // Start timer\n      let seconds = 0;\n      timerRef.current = setInterval(() => {\n        seconds++;\n        setTimer(seconds);\n        if (seconds >= MAX_RECORDING_TIME) {\n          stopRecording();\n        }\n      }, 1000);\n    } catch (error) {\n      console.error('Error starting recording:', error);\n      setUploadStatus('Error: ' + error.message);\n    }\n  };\n  const stopRecording = () => {\n    if (mediaRecorder && recording) {\n      mediaRecorder.stop();\n      setRecording(false);\n      clearInterval(timerRef.current);\n      setTimer(0);\n    }\n  };\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n  const downloadRecording = () => {\n    if (recordedChunks.length === 0) return;\n    const blob = new Blob(recordedChunks, {\n      type: 'video/webm'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `recording-${Date.now()}.webm`;\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n  const uploadRecording = async () => {\n    if (recordedChunks.length === 0) return;\n    try {\n      setUploadStatus('Uploading...');\n      const blob = new Blob(recordedChunks, {\n        type: 'video/webm'\n      });\n      const formData = new FormData();\n      formData.append('video', blob, `recording-${Date.now()}.webm`);\n      const response = await fetch('http://localhost:5000/api/recordings', {\n        method: 'POST',\n        body: formData\n      });\n      if (response.ok) {\n        setUploadStatus('Upload successful!');\n        setRecordedChunks([]);\n        setPreviewUrl('');\n        onRecordingUploaded();\n      } else {\n        const error = await response.json();\n        setUploadStatus('Upload failed: ' + error.error);\n      }\n    } catch (error) {\n      console.error('Error uploading recording:', error);\n      setUploadStatus('Upload failed: ' + error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"recorder\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"recorder-title\",\n      children: \"Record Your Screen\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recorder-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: recording ? stopRecording : startRecording,\n        className: recording ? \"record-button stop\" : \"record-button start\",\n        children: recording ? 'Stop Recording' : 'Start Recording'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), recording && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        children: [\"Recording: \", formatTime(timer)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), previewUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"preview-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"preview-title\",\n        children: \"Preview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        src: previewUrl,\n        controls: true,\n        className: \"preview-video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"action-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: downloadRecording,\n          className: \"action-button download-button\",\n          children: \"Download\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: uploadRecording,\n          className: \"action-button upload-button\",\n          children: \"Upload to Server\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this), uploadStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-message\",\n        children: uploadStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n};\n_s(Recorder, \"0EZ6x9PSqo0MGR9tj+m+JjzZQhE=\");\n_c = Recorder;\nexport default Recorder;\nvar _c;\n$RefreshReg$(_c, \"Recorder\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","Recorder","onRecordingUploaded","_s","recording","setRecording","mediaRecorder","setMediaRecorder","recordedChunks","setRecordedChunks","timer","setTimer","uploadStatus","setUploadStatus","previewUrl","setPreviewUrl","timerRef","MAX_RECORDING_TIME","startRecording","displayStream","navigator","mediaDevices","getDisplayMedia","video","mediaSource","audioStream","getUserMedia","audio","combinedStream","MediaStream","getVideoTracks","getAudioTracks","recorder","MediaRecorder","mimeType","chunks","ondataavailable","e","data","size","push","onstop","blob","Blob","type","URL","createObjectURL","getTracks","forEach","track","stop","start","seconds","current","setInterval","stopRecording","error","console","message","clearInterval","formatTime","mins","Math","floor","secs","toString","padStart","downloadRecording","length","url","a","document","createElement","href","download","Date","now","click","revokeObjectURL","uploadRecording","formData","FormData","append","response","fetch","method","body","ok","json","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","controls","_c","$RefreshReg$"],"sources":["C:/Users/lenovo/mern-screen-recorder/frontend/src/components/Recorder.jsx"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\n\r\nconst Recorder = ({ onRecordingUploaded }) => {\r\n  const [recording, setRecording] = useState(false);\r\n  const [mediaRecorder, setMediaRecorder] = useState(null);\r\n  const [recordedChunks, setRecordedChunks] = useState([]);\r\n  const [timer, setTimer] = useState(0);\r\n  const [uploadStatus, setUploadStatus] = useState('');\r\n  const [previewUrl, setPreviewUrl] = useState('');\r\n  \r\n  const timerRef = useRef(null);\r\n\r\n  const MAX_RECORDING_TIME = 180; // 3 minutes in seconds\r\n\r\n  const startRecording = async () => {\r\n    try {\r\n      // Get display media (screen)\r\n      const displayStream = await navigator.mediaDevices.getDisplayMedia({\r\n        video: { mediaSource: 'screen' }\r\n      });\r\n      \r\n      // Get microphone audio\r\n      const audioStream = await navigator.mediaDevices.getUserMedia({\r\n        audio: true\r\n      });\r\n      \r\n      // Combine both streams\r\n      const combinedStream = new MediaStream([\r\n        ...displayStream.getVideoTracks(),\r\n        ...audioStream.getAudioTracks()\r\n      ]);\r\n      \r\n      // Create media recorder\r\n      const recorder = new MediaRecorder(combinedStream, {\r\n        mimeType: 'video/webm; codecs=vp9,opus'\r\n      });\r\n      \r\n      const chunks = [];\r\n      recorder.ondataavailable = (e) => {\r\n        if (e.data.size > 0) {\r\n          chunks.push(e.data);\r\n        }\r\n      };\r\n      \r\n      recorder.onstop = () => {\r\n        setRecordedChunks(chunks);\r\n        const blob = new Blob(chunks, { type: 'video/webm' });\r\n        setPreviewUrl(URL.createObjectURL(blob));\r\n        \r\n        // Stop all tracks\r\n        combinedStream.getTracks().forEach(track => track.stop());\r\n      };\r\n      \r\n      recorder.start();\r\n      setMediaRecorder(recorder);\r\n      setRecording(true);\r\n      setRecordedChunks([]);\r\n      setPreviewUrl('');\r\n      \r\n      // Start timer\r\n      let seconds = 0;\r\n      timerRef.current = setInterval(() => {\r\n        seconds++;\r\n        setTimer(seconds);\r\n        \r\n        if (seconds >= MAX_RECORDING_TIME) {\r\n          stopRecording();\r\n        }\r\n      }, 1000);\r\n      \r\n    } catch (error) {\r\n      console.error('Error starting recording:', error);\r\n      setUploadStatus('Error: ' + error.message);\r\n    }\r\n  };\r\n\r\n  const stopRecording = () => {\r\n    if (mediaRecorder && recording) {\r\n      mediaRecorder.stop();\r\n      setRecording(false);\r\n      clearInterval(timerRef.current);\r\n      setTimer(0);\r\n    }\r\n  };\r\n\r\n  const formatTime = (seconds) => {\r\n    const mins = Math.floor(seconds / 60);\r\n    const secs = seconds % 60;\r\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\r\n  };\r\n\r\n  const downloadRecording = () => {\r\n    if (recordedChunks.length === 0) return;\r\n    \r\n    const blob = new Blob(recordedChunks, { type: 'video/webm' });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = `recording-${Date.now()}.webm`;\r\n    a.click();\r\n    URL.revokeObjectURL(url);\r\n  };\r\n\r\n  const uploadRecording = async () => {\r\n    if (recordedChunks.length === 0) return;\r\n    \r\n    try {\r\n      setUploadStatus('Uploading...');\r\n      \r\n      const blob = new Blob(recordedChunks, { type: 'video/webm' });\r\n      const formData = new FormData();\r\n      formData.append('video', blob, `recording-${Date.now()}.webm`);\r\n      \r\n      const response = await fetch('http://localhost:5000/api/recordings', {\r\n        method: 'POST',\r\n        body: formData\r\n      });\r\n      \r\n      if (response.ok) {\r\n        setUploadStatus('Upload successful!');\r\n        setRecordedChunks([]);\r\n        setPreviewUrl('');\r\n        onRecordingUploaded();\r\n      } else {\r\n        const error = await response.json();\r\n        setUploadStatus('Upload failed: ' + error.error);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error uploading recording:', error);\r\n      setUploadStatus('Upload failed: ' + error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"recorder\">\r\n      <h2 className=\"recorder-title\">Record Your Screen</h2>\r\n      \r\n      <div className=\"recorder-controls\">\r\n        <button\r\n          onClick={recording ? stopRecording : startRecording}\r\n          className={recording ? \"record-button stop\" : \"record-button start\"}\r\n        >\r\n          {recording ? 'Stop Recording' : 'Start Recording'}\r\n        </button>\r\n        \r\n        {recording && (\r\n          <div className=\"timer\">\r\n            Recording: {formatTime(timer)}\r\n          </div>\r\n        )}\r\n      </div>\r\n      \r\n      {previewUrl && (\r\n        <div className=\"preview-container\">\r\n          <h3 className=\"preview-title\">Preview</h3>\r\n          <video\r\n            src={previewUrl}\r\n            controls\r\n            className=\"preview-video\"\r\n          />\r\n          \r\n          <div className=\"action-buttons\">\r\n            <button\r\n              onClick={downloadRecording}\r\n              className=\"action-button download-button\"\r\n            >\r\n              Download\r\n            </button>\r\n            \r\n            <button\r\n              onClick={uploadRecording}\r\n              className=\"action-button upload-button\"\r\n            >\r\n              Upload to Server\r\n            </button>\r\n          </div>\r\n          \r\n          {uploadStatus && (\r\n            <div className=\"status-message\">{uploadStatus}</div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recorder;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}